datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String          @unique
  password      String?
  emailVerified DateTime?
  role          String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Product {
  id                String                      @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  createdAt         DateTime                    @default(now())
  updatedAt         DateTime                    @updatedAt
  thumbnailId       String                      @db.ObjectId
  thumbnail         Picture                     @relation(fields: [thumbnailId], references: [id], onDelete: Cascade)
  variants          ProductVariant[]
  description       String?                     @default("")
  productCategories ProductCategoryAssignment[] 
}

model Color {
  id       String           @id @default(auto()) @map("_id") @db.ObjectId
  name     String           @unique
  variants ProductVariant[]
}

model Size {
  id       String           @id @default(auto()) @map("_id") @db.ObjectId
  name     String           @unique
  variants ProductVariant[]
}

model ProductVariant {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  productId  String           @db.ObjectId
  colorId    String           @db.ObjectId
  sizeId     String           @db.ObjectId
  quantity   Int
  price      Int
  pictures   VariantPicture[]
  orderItems OrderItem[]
  color      Color            @relation(fields: [colorId], references: [id], onDelete: Restrict)
  size       Size             @relation(fields: [sizeId], references: [id], onDelete: Restrict)
  product    Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Category {
  id                String                      @id @default(auto()) @map("_id") @db.ObjectId
  name              String                      @unique
  productCategories ProductCategoryAssignment[]
}

model ProductCategoryAssignment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  productId  String   @db.ObjectId
  categoryId String   @db.ObjectId
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([categoryId])
}

model OrderItem {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  variantId String         @db.ObjectId
  orderId   String         @db.ObjectId
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  order     Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([variantId])
  @@index([orderId])
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  userId     String      @db.ObjectId
  status     String      @default("success") // success, returned, canceled
  createdAt  DateTime    @default(now())
  orderItems OrderItem[]
  user       User        @relation(fields: [userId], references: [id], onDelete: NoAction)
  total      Int

  @@index([userId])
}

model Cart {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  session String  @unique
  userId  String? @unique @db.ObjectId
  orderId String? @unique @db.ObjectId
}

model CartItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  variantId String @db.ObjectId
  cartId    String @db.ObjectId
  quantity  Int
}

model Picture {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  url             String           @unique
  variantPictures VariantPicture[]
  products        Product[]
}

model VariantPicture {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  variantId String         @db.ObjectId
  pictureId String         @db.ObjectId
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  picture   Picture        @relation(fields: [pictureId], references: [id], onDelete: Cascade)
}
